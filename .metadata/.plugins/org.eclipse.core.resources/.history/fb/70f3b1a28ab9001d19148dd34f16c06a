package com.example.demo_nvspringboot.controller;

import java.util.List;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo_nvspringboot.EmployeeService.EmployeeService;
import com.example.demo_nvspringboot.entityManagerFactory.Employee;
import com.example.demo_nvspringboot.exception.EmployeeAlreadyExistsException;

@RestController
public class EmployeeController {
	
	@Autowired
	private EmployeeService empServ;
	
	
	@PostMapping("/saveEmployee")
	public ResponseEntity<Employee> saveEmployee(@RequestBody Employee emp) throws EmployeeAlreadyExistsException {
		
		Employee savedEmp = empServ.saveEmployee(emp);
		return new ResponseEntity<Employee>(savedEmp, HttpStatus.CREATED);
	}
	
	@GetMapping("/allEmployees")
	public ResponseEntity<List<Employee>> getAllEmployees(){
		List<Employee> employees = empServ.getAllEmployees();
		return new ResponseEntity<List<Employee>>(employees, HttpStatus.OK);
		
	}
	
	@GetMapping("/allEmployees/{id}")
	public ResponseEntity<Optional<Employee>> getEmployeeById(@PathVariable int id){
		Optional<Employee> emp =  empServ.getEmployeeById(id);
		return new ResponseEntity<>(emp, HttpStatus.OK);
		
	}
	
	@DeleteMapping("/delEmployee/{id}")
	public ResponseEntity<String> deleteEmployeeById(@PathVariable int id) {
		String msg = empServ.deleteEmployeeById(id);
		return new ResponseEntity<String>(msg,HttpStatus.OK);
	}
	
	@PutMapping("/updateEmployee")
	public ResponseEntity<Employee> updateEmployee(@RequestBody Employee emp) {
		Employee upEmp = empServ.updateEmployee(emp);
		return new ResponseEntity<>(upEmp,HttpStatus.OK);
	}
	
	@GetMapping("/employee/{firstName}")
	public List<Employee> getEmployeeByFirstName(@PathVariable String firstName) {
		List<Employee> list = empServ.getEmployeeByFirstName(firstName);
		return list;
	}
}

// map json fields with entity class object - RequestBody
